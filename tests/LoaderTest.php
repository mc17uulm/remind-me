<?php

use RemindMe\api\APIHandler;
use RemindMe\api\handler\LinkHandler;
use RemindMe\cron\CronJob;
use RemindMe\Loader;

/**
 *
 */
final class LoaderTest extends WP_UnitTestCase
{

    /**
     * setUp function to load plugin in wordpress instance
     */
    public function setUp()
    {
        parent::setUp();
    }

    public function testUser() : void {
        $user = $this->factory()->user->create(['role' => 'administrator']);
        wp_set_current_user($user);
        try {
            $e = activate_plugin('remind-me/remind-me.php');
        } catch (Exception $e) {
            var_dump($e->getMessage());
        }
        #var_dump($e);
    }

    /**
     * @test
     *
     * Check if the plugin can be activated (via setUp()) and is correctly activated
     */
    /**public function testIfActivated()
    {
        $apl = get_option('active_plugins');
        $all_plugins = get_plugins();
        $active_plugins = [];
        foreach ($apl as $p) {
            if(isset($all_plugins[$p])) {
                array_push($active_plugins, $all_plugins[$p]);
            }
        }
        // check if was activated correctly
        $this->assertCount(1, array_filter($active_plugins, fn(array $plugin) => $plugin['Name'] === "RemindMe"));
    }

    public function testActivateFired()
    {
        global $wpdb;
        $result = $wpdb->get_results('show tables');
        $searched = array_map(fn(string $t) => $wpdb->base_prefix . "remind_me_" . $t, ['events', 'subscribers', 'tokens']);
        $this->assertCount(3, array_filter($result, function(stdClass $table) use($searched) {
            return in_array($table->Tables_in_wordpress, $searched);
        }));
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        #deactivate_plugins('remind-me/remind-me.php');
    }*/


}